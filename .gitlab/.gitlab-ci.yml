include:
  - local: '.gitlab/templates.yml'

stages:
  - check
  - build
  - test
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_TAG # Run for tagged releases
    - if: $CI_COMMIT_REF_PROTECTED == "true" # Run for main and release/* maintenance branches
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run for MRs

variables:
  OSEC_NSPECT_ID: NSPECT-DRJJ-1IL9
  OSEC_SONARQUBE_ENABLED: true
  OSEC_OMNI_SANITIZER_ENABLED: true
  OSEC_CHECKMARX_ENABLED: false
  OSEC_OMNI_PULSE_ENABLED: false

check_code_format:
  extends: [.default_job]
  stage: check
  cache: {} # Override default cache, no need to cache for this linting job
  script:
    - poetry install
    - poetry run poe lint

.build_base:
  extends: [.default_job]
  stage: build
  needs: [] # do not wait for checks
  script:
    - poetry install
    - poetry build
  artifacts:
    paths:
      - dist/

build_linux:
  extends: [.build_base]

build_windows:
  extends: [.build_base, .setup_windows]

.test_base:
  extends: [.default_job]
  stage: test
  script:
    - poetry install
    - poetry run poe test

test_linux:
  extends: [.test_base]
  needs: ["build_linux"]

test_windows:
  extends: [.test_base, .setup_windows]
  needs: ["build_windows"]

deploy_tagged:
  extends: [.default_job, .osec:vault:v3:prod_token_job]
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  before_script:
    - !reference [.osec:vault:v3:linux, artifactory:perform_vault_requests]
  script:
    - poetry publish --repository https://REDACTED -u $ARTIFACTORY_USERNAME -p $ARTIFACTORY_KEY --verbose dist/*.whl

deploy_preview:
  extends: [.default_job, .osec:vault:v3:prod_token_job]
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG == null'
  before_script:
    - !reference [.osec:vault:v3:linux, artifactory:perform_vault_requests]
  script:
    - poetry publish --repository https://REDACTED -u $ARTIFACTORY_USERNAME -p $ARTIFACTORY_KEY --verbose dist/*.whl
