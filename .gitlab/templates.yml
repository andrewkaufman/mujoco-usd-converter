.setup_linux:
  extends: [.omni_nvks_micro_runner]
  before_script:
    - apt-get update -yq
    - apt-get install -yq --no-install-recommends \
        python3 \
        python3-dev \
        python3-pip \
        python3-venv
    - python3 -m pip install --upgrade pip
    - python3 -m pip install poetry
    # Verify installations
    - echo "Verifying installations..."
    - python3 --version
    - pip --version
    - poetry --version
    - echo "Linux Python/Poetry setup complete."

.setup_windows:
  extends: [.runner-build-windows-x86_64]
  rules:
    - when: never # tmp disabled until we have a windows runner with python 3.10
  # before_script:
  #   # Ensure system Python (3.12 assumed) pip is upgraded and install Poetry locally
  #   - python -m pip install --upgrade pip
  #   - $env:POETRY_LOCAL_INSTALL_DIR = "$($env:CI_PROJECT_DIR)\.poetry-install"
  #   - python -m pip install --upgrade poetry --target "$env:POETRY_LOCAL_INSTALL_DIR"
  #   - $env:PATH = "$($env:POETRY_LOCAL_INSTALL_DIR)\bin;" + $env:PATH
  #   - poetry --version

  #   # Download and set up Python 3.10
  #   - $env:PYTHON310_VERSION = "3.10.11" # Using a specific, known-good version
  #   - $env:PYTHON310_DOWNLOAD_URL = "https://www.python.org/ftp/python/$($env:PYTHON310_VERSION)/python-$($env:PYTHON310_VERSION)-embed-amd64.zip"
  #   - $env:PYTHON310_ZIP_PATH = "$($env:CI_PROJECT_DIR)\python-$($env:PYTHON310_VERSION)-embed-amd64.zip"
  #   - $env:PYTHON310_EXTRACT_PATH = "$($env:CI_PROJECT_DIR)\python-$($env:PYTHON310_VERSION)-embed-amd64"
  #   - echo "Downloading Python $($env:PYTHON310_VERSION)..."
  #   - Invoke-WebRequest -Uri $env:PYTHON310_DOWNLOAD_URL -OutFile $env:PYTHON310_ZIP_PATH
  #   - echo "Extracting Python $($env:PYTHON310_VERSION)..."
  #   - Expand-Archive -Path $env:PYTHON310_ZIP_PATH -DestinationPath $env:PYTHON310_EXTRACT_PATH -Force
  #   - $env:PYTHON310_EXECUTABLE_PATH = Join-Path -Path $env:PYTHON310_EXTRACT_PATH -ChildPath "python.exe"

  #   # Modify ._pth file for the embedded Python 3.10 to enable site packages (crucial for venv creation)
  #   - $pythonMajor = $env:PYTHON310_VERSION.Split('.')[0]
  #   - $pythonMinor = $env:PYTHON310_VERSION.Split('.')[1]
  #   - $pthFileName = "python$($pythonMajor)$($pythonMinor)._pth" # e.g., python310._pth
  #   - $pthFilePath = Join-Path -Path $env:PYTHON310_EXTRACT_PATH -ChildPath $pthFileName
  #   - |
  #     if (Test-Path $pthFilePath) {
  #       (Get-Content $pthFilePath) -replace '#import site', 'import site' | Set-Content $pthFilePath
  #     } else {
  #       echo "Warning: $pthFilePath not found. Python 3.10 virtual environment creation might fail or lack full functionality."
  #     }

  #   # Verify Python 3.10 executable and configure Poetry
  #   - |
  #     if (-not (Test-Path $env:PYTHON310_EXECUTABLE_PATH)) {
  #       echo "ERROR: Python 3.10 executable not found at $($env:PYTHON310_EXECUTABLE_PATH)."
  #       echo "Contents of $($env:PYTHON310_EXTRACT_PATH):"
  #       Get-ChildItem -Path $env:PYTHON310_EXTRACT_PATH
  #       exit 1
  #     }
  #   - "& '$($env:PYTHON310_EXECUTABLE_PATH)' --version"
  #   - echo "Configuring Poetry to use downloaded Python 3.10..."
  #   - poetry env use $env:PYTHON310_EXECUTABLE_PATH
  #   - poetry config virtualenvs.in-project true --local
  #   - echo "Windows environment setup complete."

.default_job:
  extends: [.setup_linux]
  timeout: 10 minutes
  interruptible: true
  # Only retry on Gitlab failures (not on script failures for example)
  retry:
    max: 2
    when:
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
      - scheduler_failure
      - unknown_failure
  artifacts:
    when: always
    expire_in: 2 weeks

.osec:stage_base:
  stage: check # setup all osec jobs as checks
